// Don't forget to tell Prisma about your edits to this file using
// `yarn rw prisma migrate dev` or `yarn rw prisma db push`.
// `migrate` is like committing while `push` is for prototyping.
// Read more about both here:
// https://www.prisma.io/docs/orm/prisma-migrate

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Category {
  idString    String @id
  name        String
  description String

  products Product[]

  createdAt DateTime @default(now())
}

model Product {
  idInt          Int     @id @default(autoincrement())
  name           String
  price          Float
  description    String
  specifications String
  // Images processed by Redwood's experimental uploads system
  image          String?

  category   Category @relation(fields: [categoryId], references: [idString])
  categoryId String

  cartItems  CartItem[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  idString  String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String

  roles  Role[]  @default([Customer])
  carts  Cart[]
  orders Order[]

  // dbAuth fields
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  // Skips all permission checks
  Administrator

  // Can view and edit the store's settings and users
  // can also view analytics
  Manager

  // Can view and edit the store's products, categories, and orders
  Employee

  // Akin to no permissions (i.e. normal user)
  Customer
}

model Cart {
  // cuid2 (collision resistant and harder to guess, while being shorter than uuid)
  idString String @id

  // User is optional: A cart may be anonymous (logged out) and managed only through ID
  user   User?   @relation(fields: [userId], references: [idString])
  userId String? @unique

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Represents an item in someone's cart
model CartItem {
  product   Product @relation(fields: [productId], references: [idInt], onDelete: Cascade)
  productId Int

  cart   Cart   @relation(fields: [cartId], references: [idString], onDelete: Cascade)
  cartId String

  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, cartId])
}

// very similar to how a cart operates
model Order {
  // cuid2, see cart
  idString String @id

  user   User?   @relation(fields: [userId], references: [idString])
  userId String?

  email                String
  shippingFirst        String
  shippingLast         String
  shippingAddress      String
  shippingAddressLine2 String?

  items OrderItem[]
}

model OrderItem {
  product   Product @relation(fields: [productId], references: [idInt], onDelete: Cascade)
  productId Int

  order   Order  @relation(fields: [orderId], references: [idString], onDelete: Cascade)
  orderId String

  quantity Int

  @@id([productId, orderId])
}
